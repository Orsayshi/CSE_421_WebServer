Project #1 
Implement a Multi-threaded Web Sever 
CSE 421 
Professor Tefvik Kosar 

a) Group Name: Hello World 
Group Members: (3) 
	1.Haoyugu@buffalo.edu  50087555
	2.Justynth@buffalo.edu 50079794
	3.Orkhiyae@buffalo.edu 50124821

b) The data structure our team used is a linked list. The linked list stores the information of a given request. The data stored is associated with the content of the file, the time in which it has arrived and the size of the content. We then store data by adding the incoming data to the tail of the list. When schedule occurs for the FCFS we take the head of the list which is the first element that can be scheduled and it is then removed for the linked list. For SJF we check the content size of the file and which ever file has the smallest context size is the first element to be removed. 

c) The context switches are implemented in the scheduler function. The scheduler functions allows the threads to be able to access the data structure when it can be accessed. Our scheduler checks to make sure that there is an available request to be assigned for service. We use mutex locks and signals during to check what is available and what is not available. This allows for protection of our list in order to avoid data loss. 

d) Race conditions are avoided in our code by using mutex locks. We check to make sure that the data structure contains content by checking if the head node is not null. We place a lock on the scheduler and the queue which ensures that there are not multiple threads with in the critical section. Then the time is checked and we establish that the thread is ready and once the process is complete we unlock the scheduler and queue and use a signal to notify other threads that the scheduler is available. Without the use of mutex locks the possibility of multiple threads writing at the same time to the output.

e) For the FCFS the data is ordered within the data structure based on which content comes in first. By this case using FCFS is easily done by removing the first element of the data structure after it has completed the request. When using SJF we need to iterate through the data structure and check the content size of all the files each time and choose the file which has the smallest content size. Due to this the program can take a longer amount of time to complete all requests.

f) Works Cited:
a. Soc.c √ê Code provided by Professor Tevfik Kosar, written by Ken Smith
b. Linux man pages - https://linux.die.net/man/
c. C++ Tutorial: Intro to Linked Lists - http://pumpkinprogrammer.com/2014/06/13/c-tutorial-intro-to-linked-lists/

